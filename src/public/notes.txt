app file structure


env
  mongo uri+password
  fb auth id and secret
  google auth id and secret
  app url

db file
  connect to mongo

server js

  import 
    passport
    sessions/cookie
    db connection

   connect to db

  use
    session/cookie
    passport

    handlebars, view engine

  routes (use)
    /login
    /profile

    /auth/facebook
    /auth/google


auth/google (or fb)
  
  import passport strategy,passport,express router, mongoose user model

  config for user session
  passport.serializeuser
  passport.deserialiseuser


  config for passport google
    passport.use
    //for passport.authenticate

      google strategy
        passed options
          client id
            env
          client secret
            env
          callback url
            env app url
            /auth/google/redirect

      callback 

      //token, token, provider profile 
      // trycatch because async await for mongo
      //can use express-async-handlers if you want to DRY the trycatch in your controlllers

        try
          db find user - by email
            ! user
              create user
                email
                name - removed domain from email address
            =user
              do nothing
          cb return err null, user
          - provider user id is inserted into session

        catch
          error

    routes

      call to provider
        //call to provider requesting for scope, 
        //provider verifies the user on app's behalf
        //
        route '/'
        passport.authenticate
        scope
          email,profile

      provider redirects after verifying
        route '/redirect'
        options 
          success redirect
            '/profile'
          failure redirect
            '/login'
          failure flash
            needs connectflash
          

middleware/isauth
  implement function that redirects to /login if req.user not found
  mount it on /profile or other protected routes


read docs
passportjs
http://www.passportjs.org/
  docs
    general
      authenticate
    providers
      facebook
        install
        config
          strategy
            client, secret,callback
          callback
            app user database
            error handling
        routes
          from app redirect to provider
          provider callback to redirect to app protected route after user verified by provider
        permission 
          (authenticate provider scope)
        links 
          (fb login button)
      google


npm passport facebook
https://github.com/jaredhanson/passport-facebook

get credentials
facebook
https://developers.facebook.com/apps
>settings>basic

google
https://console.cloud.google.com/apis/credentials


express and handlebars
https://www.freecodecamp.org/news/getting-off-the-ground-with-expressjs-89ada7ef4e59/


passportjs (devto)
https://dev.to/phyllis_yym/beginner-s-guide-to-google-oauth-with-passport-js-2gh4